@page "/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]


<h3 class="card-title"> Main</h3>
<br />


<div class="row">
    <div class="col-md-5">
        <Search OnSearchChanged="SearchChanged" />
    </div>
    <div class="col-md-5">
        <Sort OnSortChanged="SortChanged" />
    </div>
</div>
<div class="row">
    <div class="col">
        <ProductTable Items="ItemList" />
    </div>
</div>
<div class="row">
    <div class="col">
        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
    </div>
</div>

@code {
    @using BlazorProducts.Client.Components.ProductTable

    public List<Item> ItemList { get; set; } = new List<Item>();
    public MetaData MetaData { get; set; } = new MetaData();
    private ItemParameters _itemParameters = new ItemParameters();

    [Inject]
    public IItemHttpRepository ItemRepo { get; set; }

    private List<Item> item { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        var pagingResponse = await ItemRepo.GetItems(_itemParameters);
        ItemList = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
    }

    private async Task SelectedPage(int page)
    {
        _itemParameters.PageNumber = page;
        await GetItems();
    }

    private async Task GetItems()
    {
        _interceptor.MonitorEvent();
        var pagingResponse = await ItemRepo.GetItems(_itemParameters);
        ItemList = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
    }
    private async Task SearchChanged(string searchTerm)
    {
        Console.WriteLine(searchTerm);
        _itemParameters.PageNumber = 1;
        _itemParameters.SearchTerm = searchTerm;
        await GetItems();
    }

    private async Task SortChanged(string orderBy)
    {
        Console.WriteLine(orderBy);
        _itemParameters.OrderBy = orderBy;
        await GetItems();
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
