@inject HttpClient _client
@inject HttpInterceptorService _interceptor
@implements IDisposable
<h3>FormComponent</h3>

<EditForm Model="@shippingaddress" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>First Name: </label>
        <div>
            <InputText @bind-Value="@shippingaddress.FirstName" class="form-control" />
            <ValidationMessage For="@(() => shippingaddress.FirstName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Last Name: </label>
        <div>
            <InputText @bind-Value="@shippingaddress.LastName" class="form-control" />
            <ValidationMessage For="@(() => shippingaddress.LastName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Address: </label>
        <div>
            <InputText @bind-Value="@shippingaddress.Address" class="form-control" />
            <ValidationMessage For="@(() => shippingaddress.Address)" />
        </div>
    </div>

    <div class="form-group">
        <label>Apartment: </label>
        <div>
            <InputText @bind-Value="@shippingaddress.Apartment" class="form-control" />
            <ValidationMessage For="@(() => shippingaddress.Apartment)" />
        </div>
    </div>

    <div class="form-group">
        <label>City: </label>
        <div>
            <InputText @bind-Value="@shippingaddress.City" class="form-control" />
            <ValidationMessage For="@(() => shippingaddress.City)" />
        </div>
    </div>

    <div class="form-group">
        <label>Country: </label>
        <div>
            <InputText @bind-Value="@shippingaddress.Country" class="form-control" />
            <ValidationMessage For="@(() => shippingaddress.Country)" />
        </div>
    </div>

    <div class="form-group">
        <label>PostalCode: </label>
        <div>
            <InputText @bind-Value="@shippingaddress.PostalCode" class="form-control" />
            <ValidationMessage For="@(() => shippingaddress.PostalCode)" />
        </div>
    </div>

    <div class="form-group">
        <label>Phone Number: </label>
        <div>
            <InputText @bind-Value="@shippingaddress.PhoneNumber" class="form-control" />
            <ValidationMessage For="@(() => shippingaddress.PhoneNumber)" />
        </div>
    </div>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    @*<BackToList Target="shippingaddress" />*@
</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Shippingaddress shippingaddress { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Shippingaddress> Shippingaddresses;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Shippingaddresses = await _client.GetFromJsonAsync<List<Shippingaddress>>($"{Endpoints.ShippingaddressesEndpoint}");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}