@inject HttpClient _client
@inject HttpInterceptorService _interceptor
@implements IDisposable
<h3>FormComponent</h3>


<EditForm Model="@customer" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Name: </label>
        <div>
            <InputText @bind-Value="@customer.Username" class="form-control" />
            <ValidationMessage For="@(() => customer.Username)" />
        </div>
    </div>
    <div class="form-group">
        <label>Password: </label>
        <div>
            <InputText @bind-Value="@customer.Password" class="form-control" />
            <ValidationMessage For="@(() => customer.Password)" />
        </div>
    </div>
    <div class="form-group">
        <label>Rating: </label>
        <div>
            <InputText @bind-Value="@customer.Rating" class="form-control" />
            <ValidationMessage For="@(() => customer.Rating)" />
        </div>
    </div>

    <div class="form-group">
        <label>Contact Number: </label>
        <div>
            <InputText @bind-Value="@customer.ContactNumber" class="form-control" />
            <ValidationMessage For="@(() => customer.ContactNumber)" />
        </div>
    </div>

    <div class="form-group">
        <label>Email Address: </label>
        <div>
            <InputText @bind-Value="@customer.EmailAddress" class="form-control" />
            <ValidationMessage For="@(() => customer.EmailAddress)" />
        </div>
    </div>


    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    @*<BackToList Target="customers" />*@
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Customer customer { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    //private IList<Shippingaddress> Shippingaddresses;

    //protected async override Task OnInitializedAsync()
    //{
    //    _interceptor.MonitorEvent();
    //    Shippingaddresses = await _client.GetFromJsonAsync<List<Shippingaddress>>($"{Endpoints.ShippingaddressesEndpoint}");
    //}

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}