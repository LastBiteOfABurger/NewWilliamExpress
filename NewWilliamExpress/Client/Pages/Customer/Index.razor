@page "/customers"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Customers</h3>

@if (Customers == null)
{
    <div class="alert alert-info"> Loading Customers</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Customers)
            {
                <tr>
                    <td>@customer.Username</td>
                    <td>
                        <a href="/customers/view/@customer.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/customers/edit/@customer.Id" class="btn btn-warning">
                            <span class=" =oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(customer.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}
@code {
    private List<Customer> Customers;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Customers = await _client.GetFromJsonAsync<List<Customer>>("api/customers");
    }

    async Task Delete(int customerId)
    {
        var customer = Customers.First(q => q.Id == customerId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {customer.Username}?");
        if (confirm)
        {
            await _client.DeleteAsync($"api/customers/{customerId}");
            await OnInitializedAsync();
        }
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }
}
